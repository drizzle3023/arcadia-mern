{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","components/common/react-notifications/index.js","views/user/forgot-password.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","Notifications","ForgotPassword","onForgotPassword","values","loading","email","forgotPassword","history","validateEmail","value","error","test","state","this","NotificationManager","warning","forgotUserMail","success","initialValues","xxs","md","to","id","onSubmit","errors","touched","name","validate","color","size","Component","connect","authUser"],"mappings":"gHAAA,6BAKeA,iBAFO,SAAAC,GAAK,OAAI,kBAAC,IAAqBA,KAEZ,CACrCC,SAAS,K,iCCNb,iGAEMC,EAAQ,SAACF,GAAD,OACV,kBAAC,IAAD,iBAASA,EAAT,CAAgBG,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,WAE5DC,EAAY,SAACJ,GAAD,OACd,yBAAKK,UAAS,oBAAeL,EAAMK,e,iCCNvC,mEAKeC,EAAf,G,sNCKMC,E,YACJ,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAMRQ,iBAAmB,SAACC,GACb,EAAKT,MAAMU,SACO,KAAjBD,EAAOE,OACT,EAAKX,MAAMY,eAAeH,EAAQ,EAAKT,MAAMa,UAVhC,EAenBC,cAAgB,SAACC,GACf,IAAIC,EAMJ,OALKD,EAEO,4CAA4CE,KAAKF,KAC3DC,EAAQ,yBAFRA,EAAQ,kCAIHA,GApBP,EAAKE,MAAQ,CACXP,MAAO,iBAHQ,E,kFA0BbQ,KAAKnB,MAAMgB,MACbI,IAAoBC,QAClBF,KAAKnB,MAAMgB,MACX,wBACA,IACA,KACA,KACA,IAGGG,KAAKnB,MAAMU,SAAyC,YAA9BS,KAAKnB,MAAMsB,gBACpCF,IAAoBG,QAClB,2BACA,0BACA,IACA,KACA,KACA,M,+BAOE,IAAD,OAGDC,EAAgB,CAAEb,MADNQ,KAAKD,MAAfP,OAGR,OACE,kBAAC,IAAD,CAAKN,UAAU,SACb,kBAAC,IAAD,CAAOoB,IAAI,KAAKC,GAAG,KAAKrB,UAAU,mBAChC,kBAAC,IAAD,CAAMA,UAAU,aACd,yBAAKA,UAAU,iCACb,uBAAGA,UAAU,iBAAb,2BACA,uBAAGA,UAAU,cAAb,kDACiD,6BADjD,kCAEkC,IAChC,kBAAC,IAAD,CAASsB,GAAE,YAAetB,UAAU,SAApC,YAHF,MASF,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAASsB,GAAE,IAAOtB,UAAU,SAC1B,0BAAMA,UAAU,iBAElB,kBAAC,IAAD,CAAWA,UAAU,QACnB,kBAAC,IAAD,CAAcuB,GAAG,0BAGnB,kBAAC,IAAD,CACEJ,cAAeA,EACfK,SAAUV,KAAKX,mBACd,gBAAGsB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,kBAAC,IAAD,CAAM1B,UAAU,mCACd,kBAAC,IAAD,CAAWA,UAAU,8BACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcuB,GAAG,gBAEnB,kBAAC,IAAD,CACEvB,UAAU,eACV2B,KAAK,QACLC,SAAU,EAAKnB,gBAEhBgB,EAAOnB,OAASoB,EAAQpB,OACvB,yBAAKN,UAAU,4BACZyB,EAAOnB,QAKd,yBAAKN,UAAU,qDACb,kBAAC,IAAD,CAASsB,GAAE,yBACT,kBAAC,IAAD,CAAcC,GAAG,mCAEnB,kBAAC,IAAD,CACEM,MAAM,UACN7B,UAAS,wCAAmC,EAAKL,MAAMU,QAAU,eAAiB,IAClFyB,KAAK,MAEL,0BAAM9B,UAAU,0BACd,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,aAElB,0BAAMA,UAAU,SAAQ,kBAAC,IAAD,CAAcuB,GAAG,8C,GAlHpCQ,aAqIdC,uBALS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEzB,MAAO,CAAEhB,eADkCgB,EAAnChB,eACiBZ,QADkB4B,EAAnB5B,QACUM,MADSsB,EAAVtB,SAMjC,CACEJ,oBAHWyB,CAKb9B","file":"static/js/user-forgot-password.f3a4d7a2.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = props => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n    withRef: false\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\nconst Colxx = (props) => (\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = (props) => (\n    <div className={`separator ${props.className}`}></div>\n);\nexport { Colxx,Separator }","import Notifications from './Notifications.js';\nimport NotificationContainer from './NotificationContainer';\nimport NotificationManager from './NotificationManager';\n\nexport { Notifications, NotificationContainer, NotificationManager };\nexport default Notifications;\n","import React, { Component } from \"react\";\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { Formik, Form, Field } from \"formik\";\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\nimport IntlMessages from \"../../helpers/IntlMessages\";\nimport { forgotPassword } from \"../../redux/actions\";\nimport { NotificationManager } from \"../../components/common/react-notifications\";\nimport { connect } from \"react-redux\";\n\nclass ForgotPassword extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"demo@gogo.com\"\n    };\n  }\n\n  onForgotPassword = (values) => {\n    if (!this.props.loading) {\n      if (values.email !== \"\") {\n        this.props.forgotPassword(values, this.props.history);\n      }\n    }\n  }\n\n  validateEmail = (value) => {\n    let error;\n    if (!value) {\n      error = \"Please enter your email address\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      error = \"Invalid email address\";\n    }\n    return error;\n  }\n\n  componentDidUpdate() {\n    if (this.props.error) {\n      NotificationManager.warning(\n        this.props.error,\n        \"Forgot Password Error\",\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else {\n      if (!this.props.loading && this.props.forgotUserMail === \"success\")\n        NotificationManager.success(\n          \"Please check your email.\",\n          \"Forgot Password Success\",\n          3000,\n          null,\n          null,\n          ''\n        );\n    }\n\n  }\n\n\n  render() {\n\n    const { email } = this.state;\n    const initialValues = { email };\n\n    return (\n      <Row className=\"h-100\">\n        <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n          <Card className=\"auth-card\">\n            <div className=\"position-relative image-side \">\n              <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n              <p className=\"white mb-0\">\n                Please use your e-mail to reset your password. <br />\n                If you are not a member, please{\" \"}\n                <NavLink to={`/register`} className=\"white\">\n                  register\n                </NavLink>\n                .\n              </p>\n            </div>\n            <div className=\"form-side\">\n              <NavLink to={`/`} className=\"white\">\n                <span className=\"logo-single\" />\n              </NavLink>\n              <CardTitle className=\"mb-4\">\n                <IntlMessages id=\"user.forgot-password\" />\n              </CardTitle>\n\n              <Formik\n                initialValues={initialValues}\n                onSubmit={this.onForgotPassword}>\n                {({ errors, touched }) => (\n                  <Form className=\"av-tooltip tooltip-label-bottom\">\n                    <FormGroup className=\"form-group has-float-label\">\n                      <Label>\n                        <IntlMessages id=\"user.email\" />\n                      </Label>\n                      <Field\n                        className=\"form-control\"\n                        name=\"email\"\n                        validate={this.validateEmail}\n                      />\n                      {errors.email && touched.email && (\n                        <div className=\"invalid-feedback d-block\">\n                          {errors.email}\n                        </div>\n                      )}\n                    </FormGroup>\n\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <NavLink to={`/user/forgot-password`}>\n                        <IntlMessages id=\"user.forgot-password-question\" />\n                      </NavLink>\n                      <Button\n                        color=\"primary\"\n                        className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\n                        size=\"lg\"\n                      >\n                        <span className=\"spinner d-inline-block\">\n                          <span className=\"bounce1\" />\n                          <span className=\"bounce2\" />\n                          <span className=\"bounce3\" />\n                        </span>\n                        <span className=\"label\"><IntlMessages id=\"user.reset-password-button\" /></span>\n                      </Button>\n                    </div>\n                  </Form>\n                )}\n              </Formik>\n            </div>\n          </Card>\n        </Colxx>\n      </Row>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n  const { forgotUserMail, loading, error } = authUser;\n  return { forgotUserMail, loading, error };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    forgotPassword\n  }\n)(ForgotPassword);\n\n"],"sourceRoot":""}