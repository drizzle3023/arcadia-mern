{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","components/common/react-notifications/index.js","views/user/login.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","Notifications","Login","onUserLogin","values","loading","email","password","loginUser","history","validateEmail","value","error","test","validatePassword","length","state","this","NotificationManager","warning","initialValues","xxs","md","to","id","onSubmit","errors","touched","name","validate","type","color","size","Component","connect","authUser","user"],"mappings":"gHAAA,6BAKeA,iBAFO,SAAAC,GAAK,OAAI,kBAAC,IAAqBA,KAEZ,CACrCC,SAAS,K,iCCNb,iGAEMC,EAAQ,SAACF,GAAD,OACV,kBAAC,IAAD,iBAASA,EAAT,CAAgBG,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,WAE5DC,EAAY,SAACJ,GAAD,OACd,yBAAKK,UAAS,oBAAeL,EAAMK,e,iCCNvC,mEAKeC,EAAf,G,sNCMMC,E,YACJ,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAORQ,YAAc,SAACC,GACR,EAAKT,MAAMU,SACO,KAAjBD,EAAOE,OAAoC,KAApBF,EAAOG,UAChC,EAAKZ,MAAMa,UAAUJ,EAAQ,EAAKT,MAAMc,UAX3B,EAgBnBC,cAAgB,SAACC,GACf,IAAIC,EAMJ,OALKD,EAEO,4CAA4CE,KAAKF,KAC3DC,EAAQ,yBAFRA,EAAQ,kCAIHA,GAvBU,EA0BnBE,iBAAmB,SAACH,GAClB,IAAIC,EAMJ,OALKD,EAEMA,EAAMI,OAAS,IACxBH,EAAQ,0CAFRA,EAAQ,6BAIHA,GA/BP,EAAKI,MAAQ,CACXV,MAAO,gBACPC,SAAU,WAJK,E,kFAqCbU,KAAKtB,MAAMiB,OACbM,IAAoBC,QAClBF,KAAKtB,MAAMiB,MACX,cACA,IACA,KACA,KACA,M,+BAKI,IAAD,SACqBK,KAAKD,MAAzBT,EADD,EACCA,SACFa,EAAgB,CAACd,MAFhB,EACWA,MACWC,YAE7B,OACE,kBAAC,IAAD,CAAKP,UAAU,SACb,kBAAC,IAAD,CAAOqB,IAAI,KAAKC,GAAG,KAAKtB,UAAU,mBAChC,kBAAC,IAAD,CAAMA,UAAU,aACd,yBAAKA,UAAU,iCACb,uBAAGA,UAAU,iBAAb,2BACA,uBAAGA,UAAU,cAAb,wCAEE,6BAFF,kCAGkC,IAChC,kBAAC,IAAD,CAASuB,GAAE,YAAevB,UAAU,SAApC,YAJF,MAUF,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAASuB,GAAE,IAAOvB,UAAU,SAC1B,0BAAMA,UAAU,iBAElB,kBAAC,IAAD,CAAWA,UAAU,QACnB,kBAAC,IAAD,CAAcwB,GAAG,sBAGnB,kBAAC,IAAD,CACEJ,cAAeA,EACfK,SAAUR,KAAKd,cACd,gBAAGuB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,kBAAC,IAAD,CAAM3B,UAAU,mCACd,kBAAC,IAAD,CAAWA,UAAU,8BACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcwB,GAAG,gBAEnB,kBAAC,IAAD,CACExB,UAAU,eACV4B,KAAK,QACLC,SAAU,EAAKnB,gBAEhBgB,EAAOpB,OAASqB,EAAQrB,OACvB,yBAAKN,UAAU,4BACZ0B,EAAOpB,QAId,kBAAC,IAAD,CAAWN,UAAU,8BACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcwB,GAAG,mBAEnB,kBAAC,IAAD,CACExB,UAAU,eACV8B,KAAK,WACLF,KAAK,WACLC,SAAU,EAAKf,mBAEhBY,EAAOnB,UAAYoB,EAAQpB,UAC1B,yBAAKP,UAAU,4BACZ0B,EAAOnB,WAId,yBAAKP,UAAU,qDACb,kBAAC,IAAD,CAASuB,GAAE,yBACT,kBAAC,IAAD,CAAcC,GAAG,mCAEnB,kBAAC,IAAD,CACEO,MAAM,UACN/B,UAAS,wCAAmC,EAAKL,MAAMU,QAAU,eAAiB,IAClF2B,KAAK,MAEL,0BAAMhC,UAAU,0BACd,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,aAElB,0BAAMA,UAAU,SAAQ,kBAAC,IAAD,CAAcwB,GAAG,qC,GAhI7CS,aAoJLC,uBALS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEzB,MAAO,CAAEC,KADwBD,EAAzBC,KACO/B,QADkB8B,EAAnB9B,QACUO,MADSuB,EAAVvB,SAMvB,CACEJ,eAHW0B,CAKbhC","file":"static/js/user-login.785ddcc4.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = props => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n    withRef: false\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\nconst Colxx = (props) => (\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = (props) => (\n    <div className={`separator ${props.className}`}></div>\n);\nexport { Colxx,Separator }","import Notifications from './Notifications.js';\nimport NotificationContainer from './NotificationContainer';\nimport NotificationManager from './NotificationManager';\n\nexport { Notifications, NotificationContainer, NotificationManager };\nexport default Notifications;\n","import React, { Component } from \"react\";\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { NotificationManager } from \"../../components/common/react-notifications\";\nimport { Formik, Form, Field } from \"formik\";\n\nimport { loginUser } from \"../../redux/actions\";\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\nimport IntlMessages from \"../../helpers/IntlMessages\";\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"demo@gogo.com\",\n      password: \"gogo123\"\n    };\n  }\n\n  onUserLogin = (values) => {\n    if (!this.props.loading) {\n      if (values.email !== \"\" && values.password !== \"\") {\n        this.props.loginUser(values, this.props.history);\n      }\n    }\n  }\n\n  validateEmail = (value) => {\n    let error;\n    if (!value) {\n      error = \"Please enter your email address\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      error = \"Invalid email address\";\n    }\n    return error;\n  }\n\n  validatePassword = (value) => {\n    let error;\n    if (!value) {\n      error = \"Please enter your password\";\n    } else if (value.length < 4) {\n      error = \"Value must be longer than 3 characters\";\n    }\n    return error;\n  }\n\n  componentDidUpdate() {\n    if (this.props.error) {\n      NotificationManager.warning(\n        this.props.error,\n        \"Login Error\",\n        3000,\n        null,\n        null,\n        ''\n      );\n    }\n  }\n\n  render() {\n    const { password, email } = this.state;\n    const initialValues = {email,password};\n\n    return (\n      <Row className=\"h-100\">\n        <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n          <Card className=\"auth-card\">\n            <div className=\"position-relative image-side \">\n              <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n              <p className=\"white mb-0\">\n                Please use your credentials to login.\n                <br />\n                If you are not a member, please{\" \"}\n                <NavLink to={`/register`} className=\"white\">\n                  register\n                </NavLink>\n                .\n              </p>\n            </div>\n            <div className=\"form-side\">\n              <NavLink to={`/`} className=\"white\">\n                <span className=\"logo-single\" />\n              </NavLink>\n              <CardTitle className=\"mb-4\">\n                <IntlMessages id=\"user.login-title\" />\n              </CardTitle>\n\n              <Formik\n                initialValues={initialValues}\n                onSubmit={this.onUserLogin}>\n                {({ errors, touched }) => (\n                  <Form className=\"av-tooltip tooltip-label-bottom\">\n                    <FormGroup className=\"form-group has-float-label\">\n                      <Label>\n                        <IntlMessages id=\"user.email\" />\n                      </Label>\n                      <Field\n                        className=\"form-control\"\n                        name=\"email\"\n                        validate={this.validateEmail}\n                      />\n                      {errors.email && touched.email && (\n                        <div className=\"invalid-feedback d-block\">\n                          {errors.email}\n                        </div>\n                      )}\n                    </FormGroup>\n                    <FormGroup className=\"form-group has-float-label\">\n                      <Label>\n                        <IntlMessages id=\"user.password\" />\n                      </Label>\n                      <Field\n                        className=\"form-control\"\n                        type=\"password\"\n                        name=\"password\"\n                        validate={this.validatePassword}\n                      />\n                      {errors.password && touched.password && (\n                        <div className=\"invalid-feedback d-block\">\n                          {errors.password}\n                        </div>\n                      )}\n                    </FormGroup>\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                      <NavLink to={`/user/forgot-password`}>\n                        <IntlMessages id=\"user.forgot-password-question\" />\n                      </NavLink>\n                      <Button\n                        color=\"primary\"\n                        className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\n                        size=\"lg\"\n                      >\n                        <span className=\"spinner d-inline-block\">\n                          <span className=\"bounce1\" />\n                          <span className=\"bounce2\" />\n                          <span className=\"bounce3\" />\n                        </span>\n                        <span className=\"label\"><IntlMessages id=\"user.login-button\" /></span>\n                      </Button>\n                    </div>\n\n\n                  </Form>\n                )}\n              </Formik>\n            </div>\n          </Card>\n        </Colxx>\n      </Row>\n    );\n  }\n}\nconst mapStateToProps = ({ authUser }) => {\n  const { user, loading, error } = authUser;\n  return { user, loading, error };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    loginUser\n  }\n)(Login);\n"],"sourceRoot":""}