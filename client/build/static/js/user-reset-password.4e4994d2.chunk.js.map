{"version":3,"sources":["helpers/IntlMessages.js","components/common/CustomBootstrap.js","components/common/react-notifications/index.js","views/user/reset-password.js"],"names":["injectIntl","props","withRef","Colxx","widths","Separator","className","Notifications","ResetPassword","onResetPassword","values","loading","oobCode","URLSearchParams","location","search","get","newPassword","resetPassword","resetPasswordCode","history","NotificationManager","warning","validateNewPassword","newPasswordAgain","errors","state","this","error","success","initialValues","xxs","md","to","id","validate","onSubmit","touched","name","type","color","size","Component","connect","authUser"],"mappings":"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","file":"static/js/user-reset-password.4e4994d2.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = props => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n    withRef: false\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\nconst Colxx = (props) => (\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = (props) => (\n    <div className={`separator ${props.className}`}></div>\n);\nexport { Colxx,Separator }","import Notifications from './Notifications.js';\nimport NotificationContainer from './NotificationContainer';\nimport NotificationManager from './NotificationManager';\n\nexport { Notifications, NotificationContainer, NotificationManager };\nexport default Notifications;\n","import React, { Component } from \"react\";\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { Formik, Form, Field } from \"formik\";\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\nimport IntlMessages from \"../../helpers/IntlMessages\";\nimport { resetPassword } from \"../../redux/actions\";\nimport { NotificationManager } from \"../../components/common/react-notifications\";\nimport { connect } from \"react-redux\";\n\nclass ResetPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPassword: '',\n            newPasswordAgain: ''\n        };\n    }\n\n    onResetPassword = (values) => {\n        if (!this.props.loading) {\n            const params = new URLSearchParams(this.props.location.search);\n            const oobCode = params.get('oobCode');\n            if (oobCode) {\n                if (values.newPassword !== \"\") {\n                    this.props.resetPassword({ newPassword: values.newPassword, resetPasswordCode: oobCode, history: this.props.history });\n                }\n            } else {\n                NotificationManager.warning(\n                    \"Please check your email url.\",\n                    \"Reset Password Error\",\n                    3000,\n                    null,\n                    null,\n                    ''\n                );\n            }\n\n        }\n    }\n\n    validateNewPassword = (values) => {\n        const { newPassword, newPasswordAgain } = values;\n        let errors = {};\n        if (newPasswordAgain && newPassword !== newPasswordAgain) {\n            errors.newPasswordAgain = \"Please check your new password\";\n        }\n        return errors;\n    }\n\n    componentDidUpdate() {\n        if (this.props.error) {\n            NotificationManager.warning(\n                this.props.error,\n                \"Forgot Password Error\",\n                3000,\n                null,\n                null,\n                ''\n            );\n        } else {\n            if (!this.props.loading && this.props.newPassword === \"success\")\n                NotificationManager.success(\n                    \"Please login with your new password.\",\n                    \"Reset Password Success\",\n                    3000,\n                    null,\n                    null,\n                    ''\n                );\n        }\n\n    }\n\n\n    render() {\n        const { newPassword, newPasswordAgain } = this.state;\n        const initialValues = { newPassword, newPasswordAgain };\n\n        return (\n            <Row className=\"h-100\">\n                <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n                    <Card className=\"auth-card\">\n                        <div className=\"position-relative image-side \">\n                            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n                            <p className=\"white mb-0\">\n                                Please use your e-mail to reset your password. <br />\n                                If you are not a member, please{\" \"}\n                                <NavLink to={`/register`} className=\"white\">\n                                    register\n                </NavLink>\n                                .\n              </p>\n                        </div>\n                        <div className=\"form-side\">\n                            <NavLink to={`/`} className=\"white\">\n                                <span className=\"logo-single\" />\n                            </NavLink>\n                            <CardTitle className=\"mb-4\">\n                                <IntlMessages id=\"user.reset-password\" />\n                            </CardTitle>\n\n                            <Formik\n                                validate={this.validateNewPassword}\n                                initialValues={initialValues}\n                                onSubmit={this.onResetPassword}>\n                                {({ errors, touched }) => (\n                                    <Form className=\"av-tooltip tooltip-label-bottom\">\n                                        <FormGroup className=\"form-group has-float-label\">\n                                            <Label>\n                                                <IntlMessages id=\"user.new-password\" />\n                                            </Label>\n                                            <Field\n                                                className=\"form-control\"\n                                                name=\"newPassword\"\n                                                type=\"password\"\n                                            />\n                                        </FormGroup>\n                                        <FormGroup className=\"form-group has-float-label\">\n                                            <Label>\n                                                <IntlMessages id=\"user.new-password-again\" />\n                                            </Label>\n                                            <Field\n                                                className=\"form-control\"\n                                                name=\"newPasswordAgain\"\n                                                type=\"password\"\n                                            />\n                                            {errors.newPasswordAgain && touched.newPasswordAgain && (\n                                                <div className=\"invalid-feedback d-block\">\n                                                    {errors.newPasswordAgain}\n                                                </div>\n                                            )}\n                                        </FormGroup>\n\n                                        <div className=\"d-flex justify-content-between align-items-center\">\n                                            <NavLink to={`/user/login`}>\n                                                <IntlMessages id=\"user.login-title\" />\n                                            </NavLink>\n                                            <Button\n                                                color=\"primary\"\n                                                className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\n                                                size=\"lg\"\n                                            >\n                                                <span className=\"spinner d-inline-block\">\n                                                    <span className=\"bounce1\" />\n                                                    <span className=\"bounce2\" />\n                                                    <span className=\"bounce3\" />\n                                                </span>\n                                                <span className=\"label\"><IntlMessages id=\"user.reset-password-button\" /></span>\n                                            </Button>\n                                        </div>\n                                    </Form>\n                                )}\n                            </Formik>\n                        </div>\n                    </Card>\n                </Colxx>\n            </Row>\n        );\n    }\n}\n\nconst mapStateToProps = ({ authUser }) => {\n    const { newPassword, resetPasswordCode, loading, error } = authUser;\n    return { newPassword, resetPasswordCode, loading, error };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        resetPassword\n    }\n)(ResetPassword);\n\n"],"sourceRoot":""}